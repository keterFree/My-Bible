plugins { 
    id 'com.android.application'
    id 'kotlin-android'
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id 'dev.flutter.flutter-gradle-plugin'
}

def keyProperties = new Properties()
if (project.file('../../key.properties').exists()) {
    keyProperties.load(new FileInputStream(project.file('../../key.properties')))
}

android {
    namespace = 'com.example.epistle'
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = 'com.example.epistle'
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
    release {
        if (keyProperties.size() > 0) { // Only set if keyProperties is loaded successfully
            storeFile file(keyProperties['storeFile'])
            storePassword keyProperties['storePassword']
            keyAlias keyProperties['keyAlias']
            keyPassword keyProperties['keyPassword']
        }
    }
}


    buildTypes {
        release {
            signingConfig signingConfigs.release // Use the release signing config
            // Enables code shrinking, obfuscation, and optimization for release builds.
            minifyEnabled true
            // Enables resource shrinking, removing unused resources.
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = '../..'
}
